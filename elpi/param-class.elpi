%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            %                     Trocq                      %
%  _______                   %        Copyright (C) 2023 Inria & MERCE        %
% |__   __|                  %     (Mitsubishi Electric R&D Centre Europe)    %
%    | |_ __ ___   ___ __ _  %        Cyril Cohen <cyril.cohen@inria.fr>      %
%    | | '__/ _ \ / __/ _` | %        Enzo Crance <enzo.crance@inria.fr>      %
%    | | | | (_) | (_| (_| | %    Assia Mahboubi <assia.mahboubi@inria.fr>    %
%    |_|_|  \___/ \___\__, | %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        | | %   This file is distributed under the terms of  %
%                        |_| %   GNU Lesser General Public License Version 3  %
%                            % (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% -----------------------------------------------------------------------------
% definition of parametricity classes
% -----------------------------------------------------------------------------

% a parametricity class is a pair of map classes (levels in our hierarchy)
kind map-class type.
type map0  map-class.
type map1  map-class.
type map2a map-class.
type map2b map-class.
type map3  map-class.
type map4  map-class.

% high = axiom might be required (on product and universe)
kind class-kind type.
type low class-kind.
type high class-kind.
type all class-kind.

pred map-classes o:class-kind, o:list map-class.
map-classes all [map0, map1, map2a, map2b, map3, map4].
map-classes low [map0, map1, map2a].
map-classes high [map2b, map3, map4].

pred sym-rel o:gref.
sym-rel {{:gref lib:trocq.sym_rel}}.

pred paths o:gref.
paths {{:gref lib:trocq.paths}}.

kind param-class type.
type pc map-class -> map-class -> param-class.

pred map->class o:map-class, o:gref.
map->class map0 {{:gref lib:trocq.map0}}.
map->class map1 {{:gref lib:trocq.map1}}.
map->class map2a {{:gref lib:trocq.map2a}}.
map->class map2b {{:gref lib:trocq.map2b}}.
map->class map3 {{:gref lib:trocq.map3}}.
map->class map4 {{:gref lib:trocq.map4}}.

pred map-class->indc-class o:map-class, o:gref.
map-class->indc-class map0 {{:gref lib:trocq.indc_map0}}.
map-class->indc-class map1 {{:gref lib:trocq.indc_map1}}.
map-class->indc-class map2a {{:gref lib:trocq.indc_map2a}}.
map-class->indc-class map2b {{:gref lib:trocq.indc_map2b}}.
map-class->indc-class map3 {{:gref lib:trocq.indc_map3}}.
map-class->indc-class map4 {{:gref lib:trocq.indc_map4}}.

pred map-class->term i:map-class, o:term.
map-class->term Class (pglobal Map UI) :- std.do! [
  map-class->indc-class Class Map, coq.univ-instance UI [] ].

pred term->map-class i:term, o:map-class.
term->map-class (pglobal Map _) Class :- map-class->indc-class Class Map.

pred map-class->string i:map-class, o:string.
map-class->string map0  "0".
map-class->string map1  "1".
map-class->string map2a "2a".
map-class->string map2b "2b".
map-class->string map3  "3".
map-class->string map4  "4".

pred param-class->string i:param-class, o:string.
param-class->string (pc M N) S :-
  S is {map-class->string M} ^ {map-class->string N}.

% names of the fields contained in a witness of a given level
pred map-class->fields i:map-class, o:list string.
map-class->fields map0  [].
map-class->fields map1  ["map"].
map-class->fields map2a ["map", "map_in_R"].
map-class->fields map2b ["map", "R_in_map"].
map-class->fields map3  ["map", "map_in_R", "R_in_map"].
map-class->fields map4  ["map", "map_in_R", "R_in_map", "R_in_mapK"].

pred map-class->cofields i:map-class, o:list string.
map-class->cofields map0  [].
map-class->cofields map1  ["comap"].
map-class->cofields map2a ["comap", "comap_in_R"].
map-class->cofields map2b ["comap", "R_in_comap"].
map-class->cofields map3  ["comap", "comap_in_R", "R_in_comap"].
map-class->cofields map4  ["comap", "comap_in_R", "R_in_comap", "R_in_comapK"].

namespace map-class {

pred add-suffix i:map-class, i:string, o:string.
add-suffix Class P S :- S is P ^ {map-class->string Class}.

pred add-2-suffix i:string,
  i:map-class, i:map-class, i:string, o:string.
add-2-suffix Sep Class1 Class2 P S :-
   S is P ^ {map-class->string Class1} ^ Sep ^ {map-class->string Class2}.

% lower/higher levels at distance 1 from a given level
pred weakenings-from i:map-class, o:list map-class.
weakenings-from map0  [].
weakenings-from map1  [map0].
weakenings-from map2a [map1].
weakenings-from map2b [map1].
weakenings-from map3  [map2a, map2b].
weakenings-from map4  [map3].

pred weakenings-to i:map-class, o:list map-class.
weakenings-to map0  [map1].
weakenings-to map1  [map2a, map2b].
weakenings-to map2a [map3].
weakenings-to map2b [map3].
weakenings-to map3  [map4].
weakenings-to map4  [].

% lower/higher levels at distance 1 from a given level
pred all-weakenings-from i:map-class, o:list map-class.
all-weakenings-from map0  [].
all-weakenings-from map1  [map0].
all-weakenings-from map2a [map1, map0].
all-weakenings-from map2b [map1, map0].
all-weakenings-from map3  [map2a, map2b, map1, map0].
all-weakenings-from map4  [map3, map2a, map2b, map1, map0].

% all possible parametricity classes that can be created by combinations of 2 lists of map classes
pred product i:list map-class, i:list map-class, o:list param-class.
product Ms Ns Classes :-
  std.map Ms (m\ cs\
    std.map Ns (n\ c\ c = pc m n) cs
  ) ClassesLL,
  std.flatten ClassesLL Classes.

% least upper bound containing all the fields of the two provided map classes
pred union i:map-class, i:map-class, o:map-class.
union map4  _     map4.
union map3  map4  map4 :- !.
union map3  _     map3.
union map2b map4  map4 :- !.
union map2b map3  map3 :- !.
union map2b map2a map3 :- !.
union map2b _     map2b.
union map2a map4  map4 :- !.
union map2a map3  map3 :- !.
union map2a map2b map3 :- !.
union map2a _     map2a.
union map1  map4  map4 :- !.
union map1  map3  map3 :- !.
union map1  map2b map2b :- !.
union map1  map2a map2a :- !.
union map1  _     map1.
union map0  M     M.

% greatest lower bound containing the fields in common in the two provided map classes
pred inter i:map-class, i:map-class, o:map-class.
inter map0  _     map0.
inter map1  map0  map0 :- !.
inter map1  _     map1.
inter map2a map0  map0 :- !.
inter map2a map1  map1 :- !.
inter map2a map2b map1 :- !.
inter map2a _     map2a.
inter map2b map0  map0 :- !.
inter map2b map1  map1 :- !.
inter map2b map2a map1 :- !.
inter map2b _     map2b.
inter map3  map4  map3 :- !.
inter map3  M     M.
inter map4  M     M.

% partial order on map classes
pred geq i:map-class, i:map-class.
geq map4  _.
geq map3  M :- std.mem! [map0, map1, map2a, map2b, map3] M.
geq map2a M :- std.mem! [map0, map1, map2a] M.
geq map2b M :- std.mem! [map0, map1, map2b] M.
geq map1  M :- std.mem! [map0, map1] M.
geq map0  map0.

% minimal dependencies to translate a dependent product, see the table in the article
pred dep-pi i:map-class, o:param-class, o:param-class.
dep-pi map0  (pc map0 map0)  (pc map0 map0).
dep-pi map1  (pc map0 map2a) (pc map1 map0).
dep-pi map2a (pc map0 map4)  (pc map2a map0).
dep-pi map2b (pc map0 map2a) (pc map2b map0).
dep-pi map3  (pc map0 map4)  (pc map3 map0).
dep-pi map4  (pc map0 map4)  (pc map4 map0).

% minimal dependencies to translate an arrow type, see the table in the article
pred dep-arrow i:map-class, o:param-class, o:param-class.
dep-arrow map0  (pc map0 map0)  (pc map0 map0).
dep-arrow map1  (pc map0 map1)  (pc map1 map0).
dep-arrow map2a (pc map0 map2b) (pc map2a map0).
dep-arrow map2b (pc map0 map2a) (pc map2b map0).
dep-arrow map3  (pc map0 map3)  (pc map3 map0).
dep-arrow map4  (pc map0 map4)  (pc map4 map0).

} % map-class

pred param-classes o:class-kind, o:list param-class.
param-classes high Classes :- std.do! [
  map-classes all AllMapClasses,
  map-classes high HighMapClasses,
  map-class.product HighMapClasses AllMapClasses Classes1,
  map-class.product AllMapClasses HighMapClasses Classes2,
  std.append Classes1 Classes2 Classes
].
param-classes Kind Classes :-
  map-classes Kind MapClasses,
  map-class.product MapClasses MapClasses Classes.

namespace param-class {

% extensions of functions over map classes to parametricity classes

pred add-suffix i:param-class, i:string, o:string.
add-suffix Class P S :- S is P ^ {param-class->string Class}.

pred add-2-suffix i:string,
  i:param-class, i:param-class, i:string, o:string.
add-2-suffix Sep Class1 Class2 P S :-
   S is P ^ {param-class->string Class1} ^ Sep ^ {param-class->string Class2}.

pred weakenings-from i:param-class, o:list param-class.
weakenings-from (pc M N) Classes :-
  map-class.weakenings-from M Ms,
  map-class.weakenings-from N Ns,
  map-class.product [M] Ns MClasses,
  map-class.product Ms [N] NClasses,
  std.flatten [MClasses, NClasses] Classes.

pred weakenings-to i:param-class, o:list param-class.
weakenings-to (pc M N) Classes :-
  map-class.weakenings-to M Ms,
  map-class.weakenings-to N Ns,
  map-class.product [M] Ns MClasses,
  map-class.product Ms [N] NClasses,
  std.flatten [MClasses, NClasses] Classes.

pred all-weakenings-from i:param-class, o:list param-class.
all-weakenings-from (pc M N) Classes :-
  map-class.all-weakenings-from M Ms,
  map-class.all-weakenings-from N Ns,
  map-class.product Ms Ns StrictClasses,
  map-class.product [M] Ns MClasses,
  map-class.product Ms [N] NClasses,
  std.flatten [StrictClasses, MClasses, NClasses] Classes.

pred negate i:param-class, o:param-class.
negate (pc M N) (pc N M).

pred union i:param-class, i:param-class, o:param-class.
union (pc M1 N1) (pc M2 N2) (pc M N) :-
  map-class.union M1 M2 M,
  map-class.union N1 N2 N.

pred inter i:param-class, i:param-class, o:param-class.
inter C C' _ :- util.when-debug dbg.full (coq.say C C'), fail.
inter (pc M1 N1) (pc M2 N2) (pc M N) :-
  map-class.inter M1 M2 M,
  map-class.inter N1 N2 N.

pred geq i:param-class, i:param-class.
geq (pc M1 N1) (pc M2 N2) :-
  map-class.geq M1 M2,
  map-class.geq N1 N2.

pred dep-pi i:param-class, o:param-class, o:param-class.
dep-pi (pc M N) ClassA ClassB :-
  map-class.dep-pi M ClassAM ClassBM,
  map-class.dep-pi N ClassAN ClassBN,
  union ClassAM {param-class.negate ClassAN} ClassA,
  union ClassBM {param-class.negate ClassBN} ClassB.

pred dep-arrow i:param-class, o:param-class, o:param-class.
dep-arrow (pc M N) ClassA ClassB :-
  map-class.dep-arrow M ClassAM ClassBM,
  map-class.dep-arrow N ClassAN ClassBN,
  union ClassAM {param-class.negate ClassAN} ClassA,
  union ClassBM {param-class.negate ClassBN} ClassB.

pred to-string i:param-class, o:string.
to-string (pc M N) String :- std.do! [
  map-class->string M MStr,
  map-class->string N NStr,
  String is MStr ^ NStr
].

% generate a weakening function from a parametricity class to another, by forgetting fields 1 by 1
pred forget i:param-class, i:param-class, o:univ-instance -> term -> term -> term -> term.
forget (pc M N) (pc M N) (_\ _\ _\ r\ r) :- !.
forget (pc M N) (pc M N') ForgetF :- !,
  std.mem {map-class.weakenings-from N} N1,
  forget (pc M N1) (pc M N') ForgetF', !,
  map-class->string M MStr,
  coq.locate
    {calc ("forget_" ^ MStr ^ {map-class->string N} ^ "_" ^ MStr ^ {map-class->string N1})} Forget1,
  ForgetF = (ui\ a\ b\ r\ ForgetF' ui a b (app [pglobal Forget1 ui, a, b, r])).
forget (pc M N) (pc M' N') ForgetF :-
  std.mem {map-class.weakenings-from M} M1,
  forget (pc M1 N) (pc M' N') ForgetF', !,
  map-class->string N NStr,
  coq.locate
    {calc ("forget_" ^ {map-class->string M} ^ NStr ^ "_" ^ {map-class->string M1} ^ NStr)} Forget1,
  ForgetF = (ui\ a\ b\ r\ ForgetF' ui a b (app [pglobal Forget1 ui, a, b, r])).

% weaking of the out class of a gref.
% e.g. if GR has type `forall A B, R A B -> Param21 X Y`
% then `weaken-out (pc map1 map0) GR T`
% where `T` has type `forall A B, R A B -> Param10 X Y`
pred weaken-out i:param-class, i:gref, o:term.
weaken-out OutC GR WT :- std.do! [
  coq.env.global GR T,
  coq.env.typeof GR Ty,
  replace-out-ty OutC Ty WTy,
  std.assert-ok! (coq.elaborate-skeleton T WTy WT)
    "weaken-out: failed to weaken"
].

pred replace-out-ty i:param-class, i:term, o:term.
replace-out-ty OutC (prod N A B) (prod N A B') :- !,
   pi x\ replace-out-ty OutC (B x) (B' x).
replace-out-ty OutC InT OutT :- std.do! [
  coq.safe-dest-app InT HD Ts,
  trocq.db.gref->class OutGRClass OutC,
  util.subst-gref HD OutGRClass HD',
  coq.mk-app HD' Ts OutT
  ].

% succeed if the parametricity class contains a map class over 2b
% this means that a translation of a sort at this class will require univalence,
% and the translation of a dependent product will require funext
pred requires-axiom i:param-class.
requires-axiom (pc M N) :- (std.mem! [map2b, map3, map4] M ; std.mem! [map2b, map3, map4] N).

% find classes present in a term
pred type->class i:term, o:list param-class, o:list term.
type->class X [Class] Ts :-
  coq.safe-dest-app X HD Ts,
  (do-not-fail => coq.term->gref HD GRClass),
  trocq.db.gref->class GRClass Class.
type->class X [] Ts :- coq.safe-dest-app X _ Ts.
type->class _ [] [].

pred type->classes.rec i:term, o:list param-class, o:list param-class.
type->classes.rec (prod N A B) OutList BLast:- !,
  @pi-decl N A x\
    type->classes.rec A AList ALast, !,
    type->classes.rec (B x) BList BLast, !,
    std.append {std.append AList ALast} BList OutList.
type->classes.rec X [] Class :- !, type->class X Class _.

pred type->classes.main i:term, o:list param-class, o:list param-class, o:gref, o:gref.
type->classes.main (prod N A B) OutList BLast GR GR' :- !,
  @pi-decl N A x\
    type->classes.rec A AList ALast, !,
    type->classes.main (B x) BList BLast GR GR', !,
    std.append {std.append AList ALast} BList OutList.
type->classes.main X [] Class GR GR' :- !,
    type->class X Class Ts, !,
    std.rev Ts [T', T | _],
    coq.term->gref T GR, coq.term->gref T' GR'.

pred type->classes i:term, o:param-class, o:list param-class, o:gref, o:gref.
type->classes T OutClass DepClasses GR GR' :-
  type->classes.main T DepClasses LastClass GR GR',
  if (LastClass = [OutClass]) true (OutClass = pc map0 map0).

} % param-class
